"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodedMultiSigToEncodingData = exports.encodedMultiSigFromEncodingData = exports.ENCODED_MULTISIG_SCHEMA = exports.encodedSubsigToEncodingData = exports.encodedSubsigFromEncodingData = exports.ENCODED_SUBSIG_SCHEMA = void 0;
const index_js_1 = require("../../encoding/schema/index.js");
const utils_js_1 = require("../../utils/utils.js");
exports.ENCODED_SUBSIG_SCHEMA = new index_js_1.NamedMapSchema((0, index_js_1.allOmitEmpty)([
    {
        key: 'pk',
        valueSchema: new index_js_1.FixedLengthByteArraySchema(32),
    },
    {
        key: 's',
        valueSchema: new index_js_1.OptionalSchema(new index_js_1.FixedLengthByteArraySchema(64)),
    },
]));
function encodedSubsigFromEncodingData(data) {
    if (!(data instanceof Map)) {
        throw new Error(`Invalid decoded EncodedSubsig: ${data}`);
    }
    const subsig = {
        pk: data.get('pk'),
    };
    if (data.get('s')) {
        subsig.s = data.get('s');
    }
    return subsig;
}
exports.encodedSubsigFromEncodingData = encodedSubsigFromEncodingData;
function encodedSubsigToEncodingData(subsig) {
    const data = new Map([['pk', subsig.pk]]);
    if (subsig.s) {
        data.set('s', subsig.s);
    }
    return data;
}
exports.encodedSubsigToEncodingData = encodedSubsigToEncodingData;
exports.ENCODED_MULTISIG_SCHEMA = new index_js_1.NamedMapSchema((0, index_js_1.allOmitEmpty)([
    {
        key: 'v',
        valueSchema: new index_js_1.Uint64Schema(),
    },
    {
        key: 'thr',
        valueSchema: new index_js_1.Uint64Schema(),
    },
    {
        key: 'subsig',
        valueSchema: new index_js_1.ArraySchema(exports.ENCODED_SUBSIG_SCHEMA),
    },
]));
function encodedMultiSigFromEncodingData(data) {
    if (!(data instanceof Map)) {
        throw new Error(`Invalid decoded EncodedMultiSig: ${data}`);
    }
    return {
        v: (0, utils_js_1.ensureSafeUnsignedInteger)(data.get('v')),
        thr: (0, utils_js_1.ensureSafeUnsignedInteger)(data.get('thr')),
        subsig: data.get('subsig').map(encodedSubsigFromEncodingData),
    };
}
exports.encodedMultiSigFromEncodingData = encodedMultiSigFromEncodingData;
function encodedMultiSigToEncodingData(msig) {
    return new Map([
        ['v', msig.v],
        ['thr', msig.thr],
        ['subsig', msig.subsig.map(encodedSubsigToEncodingData)],
    ]);
}
exports.encodedMultiSigToEncodingData = encodedMultiSigToEncodingData;
//# sourceMappingURL=encoded.js.map