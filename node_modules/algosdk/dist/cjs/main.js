"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.algosToMicroalgos = exports.microalgosToAlgos = exports.mnemonicFromSeed = exports.seedFromMnemonic = exports.mnemonicToSecretKey = exports.secretKeyToMnemonic = exports.masterDerivationKeyToMnemonic = exports.mnemonicToMasterDerivationKey = exports.indexerModels = exports.modelsv2 = exports.UntypedValue = exports.generateAccount = exports.stringifyJSON = exports.parseJSON = exports.decodeUint64 = exports.encodeUint64 = exports.hexToBytes = exports.bytesToHex = exports.coerceToBytes = exports.bytesToString = exports.bytesToBase64 = exports.base64ToBytes = exports.bigIntToBytes = exports.bytesToBigInt = exports.ALGORAND_ZERO_ADDRESS_STRING = exports.getApplicationAddress = exports.decodeAddress = exports.encodeAddress = exports.isValidAddress = exports.Address = exports.decodeJSON = exports.encodeJSON = exports.decodeMsgpack = exports.encodeMsgpack = exports.msgpackRawDecodeAsMap = exports.msgpackRawDecode = exports.msgpackRawEncode = exports.decodeObj = exports.encodeObj = exports.waitForConfirmation = exports.Indexer = exports.IntDecoding = exports.Kmd = exports.Algodv2 = exports.ERROR_INVALID_MICROALGOS = exports.ERROR_MULTISIG_BAD_SENDER = exports.verifyBytes = exports.signBytes = exports.signTransaction = exports.MULTISIG_BAD_SENDER_ERROR_MSG = void 0;
exports.ProgramSourceMap = exports.appendSignRawMultisigSignature = exports.createMultisigTransaction = exports.appendSignMultisigTransaction = exports.mergeMultisigTransactions = exports.signMultisigTransaction = exports.multisigAddress = exports.verifyMultisig = exports.verifyTealSign = exports.tealSignFromProgram = exports.tealSign = exports.logicSigFromByte = exports.LogicSigAccount = exports.LogicSig = exports.signLogicSigTransactionObject = exports.signLogicSigTransaction = exports.encodeUnsignedSimulateTransaction = exports.decodeSignedTransaction = exports.SignedTransaction = exports.assignGroupID = exports.computeGroupID = exports.INVALID_MICROALGOS_ERROR_MSG = void 0;
const nacl = __importStar(require("./nacl/naclWrappers.js"));
const address_js_1 = require("./encoding/address.js");
const convert = __importStar(require("./convert.js"));
const utils = __importStar(require("./utils/utils.js"));
const SIGN_BYTES_PREFIX = Uint8Array.from([77, 88]); // "MX"
// Errors
exports.MULTISIG_BAD_SENDER_ERROR_MSG = 'The transaction sender address and multisig preimage do not match.';
/**
 * signTransaction takes an object with either payment or key registration fields and
 * a secret key and returns a signed blob.
 *
 * Payment transaction fields: from, to, amount, fee, firstValid, lastValid, genesisHash,
 * note(optional), GenesisID(optional), closeRemainderTo(optional)
 *
 * Key registration fields: fee, firstValid, lastValid, voteKey, selectionKey, voteFirst,
 * voteLast, voteKeyDilution, genesisHash, note(optional), GenesisID(optional)
 *
 * If flatFee is not set and the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.
 * @param txn - object with either payment or key registration fields
 * @param sk - Algorand Secret Key
 * @returns object contains the binary signed transaction and its txID
 */
function signTransaction(txn, sk) {
    return {
        txID: txn.txID(),
        blob: txn.signTxn(sk),
    };
}
exports.signTransaction = signTransaction;
/**
 * signBytes takes arbitrary bytes and a secret key, prepends the bytes with "MX" for domain separation, signs the bytes
 * with the private key, and returns the signature.
 * @param bytes - Uint8array
 * @param sk - Algorand secret key
 * @returns binary signature
 */
function signBytes(bytes, sk) {
    const toBeSigned = utils.concatArrays(SIGN_BYTES_PREFIX, bytes);
    const sig = nacl.sign(toBeSigned, sk);
    return sig;
}
exports.signBytes = signBytes;
/**
 * verifyBytes takes array of bytes, an address, and a signature and verifies if the signature is correct for the public
 * key and the bytes (the bytes should have been signed with "MX" prepended for domain separation).
 * @param bytes - Uint8Array
 * @param signature - binary signature
 * @param addr - string address
 * @returns bool
 */
function verifyBytes(bytes, signature, addr) {
    const toBeVerified = utils.concatArrays(SIGN_BYTES_PREFIX, bytes);
    const addrObj = typeof addr === 'string' ? address_js_1.Address.fromString(addr) : addr;
    return nacl.verify(toBeVerified, signature, addrObj.publicKey);
}
exports.verifyBytes = verifyBytes;
exports.ERROR_MULTISIG_BAD_SENDER = new Error(exports.MULTISIG_BAD_SENDER_ERROR_MSG);
exports.ERROR_INVALID_MICROALGOS = new Error(convert.INVALID_MICROALGOS_ERROR_MSG);
var algod_js_1 = require("./client/v2/algod/algod.js");
Object.defineProperty(exports, "Algodv2", { enumerable: true, get: function () { return algod_js_1.AlgodClient; } });
var kmd_js_1 = require("./client/kmd.js");
Object.defineProperty(exports, "Kmd", { enumerable: true, get: function () { return kmd_js_1.KmdClient; } });
var intDecoding_js_1 = require("./types/intDecoding.js");
Object.defineProperty(exports, "IntDecoding", { enumerable: true, get: function () { return __importDefault(intDecoding_js_1).default; } });
var indexer_js_1 = require("./client/v2/indexer/indexer.js");
Object.defineProperty(exports, "Indexer", { enumerable: true, get: function () { return indexer_js_1.IndexerClient; } });
var wait_js_1 = require("./wait.js");
Object.defineProperty(exports, "waitForConfirmation", { enumerable: true, get: function () { return wait_js_1.waitForConfirmation; } });
var encoding_js_1 = require("./encoding/encoding.js");
Object.defineProperty(exports, "encodeObj", { enumerable: true, get: function () { return encoding_js_1.encodeObj; } });
Object.defineProperty(exports, "decodeObj", { enumerable: true, get: function () { return encoding_js_1.decodeObj; } });
Object.defineProperty(exports, "msgpackRawEncode", { enumerable: true, get: function () { return encoding_js_1.msgpackRawEncode; } });
Object.defineProperty(exports, "msgpackRawDecode", { enumerable: true, get: function () { return encoding_js_1.msgpackRawDecode; } });
Object.defineProperty(exports, "msgpackRawDecodeAsMap", { enumerable: true, get: function () { return encoding_js_1.msgpackRawDecodeAsMap; } });
Object.defineProperty(exports, "encodeMsgpack", { enumerable: true, get: function () { return encoding_js_1.encodeMsgpack; } });
Object.defineProperty(exports, "decodeMsgpack", { enumerable: true, get: function () { return encoding_js_1.decodeMsgpack; } });
Object.defineProperty(exports, "encodeJSON", { enumerable: true, get: function () { return encoding_js_1.encodeJSON; } });
Object.defineProperty(exports, "decodeJSON", { enumerable: true, get: function () { return encoding_js_1.decodeJSON; } });
var address_js_2 = require("./encoding/address.js");
Object.defineProperty(exports, "Address", { enumerable: true, get: function () { return address_js_2.Address; } });
Object.defineProperty(exports, "isValidAddress", { enumerable: true, get: function () { return address_js_2.isValidAddress; } });
Object.defineProperty(exports, "encodeAddress", { enumerable: true, get: function () { return address_js_2.encodeAddress; } });
Object.defineProperty(exports, "decodeAddress", { enumerable: true, get: function () { return address_js_2.decodeAddress; } });
Object.defineProperty(exports, "getApplicationAddress", { enumerable: true, get: function () { return address_js_2.getApplicationAddress; } });
Object.defineProperty(exports, "ALGORAND_ZERO_ADDRESS_STRING", { enumerable: true, get: function () { return address_js_2.ALGORAND_ZERO_ADDRESS_STRING; } });
var bigint_js_1 = require("./encoding/bigint.js");
Object.defineProperty(exports, "bytesToBigInt", { enumerable: true, get: function () { return bigint_js_1.bytesToBigInt; } });
Object.defineProperty(exports, "bigIntToBytes", { enumerable: true, get: function () { return bigint_js_1.bigIntToBytes; } });
var binarydata_js_1 = require("./encoding/binarydata.js");
Object.defineProperty(exports, "base64ToBytes", { enumerable: true, get: function () { return binarydata_js_1.base64ToBytes; } });
Object.defineProperty(exports, "bytesToBase64", { enumerable: true, get: function () { return binarydata_js_1.bytesToBase64; } });
Object.defineProperty(exports, "bytesToString", { enumerable: true, get: function () { return binarydata_js_1.bytesToString; } });
Object.defineProperty(exports, "coerceToBytes", { enumerable: true, get: function () { return binarydata_js_1.coerceToBytes; } });
Object.defineProperty(exports, "bytesToHex", { enumerable: true, get: function () { return binarydata_js_1.bytesToHex; } });
Object.defineProperty(exports, "hexToBytes", { enumerable: true, get: function () { return binarydata_js_1.hexToBytes; } });
var uint64_js_1 = require("./encoding/uint64.js");
Object.defineProperty(exports, "encodeUint64", { enumerable: true, get: function () { return uint64_js_1.encodeUint64; } });
Object.defineProperty(exports, "decodeUint64", { enumerable: true, get: function () { return uint64_js_1.decodeUint64; } });
var utils_js_1 = require("./utils/utils.js");
Object.defineProperty(exports, "parseJSON", { enumerable: true, get: function () { return utils_js_1.parseJSON; } });
Object.defineProperty(exports, "stringifyJSON", { enumerable: true, get: function () { return utils_js_1.stringifyJSON; } });
var account_js_1 = require("./account.js");
Object.defineProperty(exports, "generateAccount", { enumerable: true, get: function () { return __importDefault(account_js_1).default; } });
__exportStar(require("./types/block.js"), exports);
__exportStar(require("./types/statedelta.js"), exports);
__exportStar(require("./stateproof.js"), exports);
var untypedmodel_js_1 = require("./client/v2/untypedmodel.js");
Object.defineProperty(exports, "UntypedValue", { enumerable: true, get: function () { return untypedmodel_js_1.UntypedValue; } });
exports.modelsv2 = __importStar(require("./client/v2/algod/models/types.js"));
exports.indexerModels = __importStar(require("./client/v2/indexer/models/types.js"));
var mnemonic_js_1 = require("./mnemonic/mnemonic.js");
Object.defineProperty(exports, "mnemonicToMasterDerivationKey", { enumerable: true, get: function () { return mnemonic_js_1.mnemonicToMasterDerivationKey; } });
Object.defineProperty(exports, "masterDerivationKeyToMnemonic", { enumerable: true, get: function () { return mnemonic_js_1.masterDerivationKeyToMnemonic; } });
Object.defineProperty(exports, "secretKeyToMnemonic", { enumerable: true, get: function () { return mnemonic_js_1.secretKeyToMnemonic; } });
Object.defineProperty(exports, "mnemonicToSecretKey", { enumerable: true, get: function () { return mnemonic_js_1.mnemonicToSecretKey; } });
Object.defineProperty(exports, "seedFromMnemonic", { enumerable: true, get: function () { return mnemonic_js_1.seedFromMnemonic; } });
Object.defineProperty(exports, "mnemonicFromSeed", { enumerable: true, get: function () { return mnemonic_js_1.mnemonicFromSeed; } });
var convert_js_1 = require("./convert.js");
Object.defineProperty(exports, "microalgosToAlgos", { enumerable: true, get: function () { return convert_js_1.microalgosToAlgos; } });
Object.defineProperty(exports, "algosToMicroalgos", { enumerable: true, get: function () { return convert_js_1.algosToMicroalgos; } });
Object.defineProperty(exports, "INVALID_MICROALGOS_ERROR_MSG", { enumerable: true, get: function () { return convert_js_1.INVALID_MICROALGOS_ERROR_MSG; } });
var group_js_1 = require("./group.js");
Object.defineProperty(exports, "computeGroupID", { enumerable: true, get: function () { return group_js_1.computeGroupID; } });
Object.defineProperty(exports, "assignGroupID", { enumerable: true, get: function () { return group_js_1.assignGroupID; } });
var signedTransaction_js_1 = require("./signedTransaction.js");
Object.defineProperty(exports, "SignedTransaction", { enumerable: true, get: function () { return signedTransaction_js_1.SignedTransaction; } });
Object.defineProperty(exports, "decodeSignedTransaction", { enumerable: true, get: function () { return signedTransaction_js_1.decodeSignedTransaction; } });
Object.defineProperty(exports, "encodeUnsignedSimulateTransaction", { enumerable: true, get: function () { return signedTransaction_js_1.encodeUnsignedSimulateTransaction; } });
var signing_js_1 = require("./signing.js");
Object.defineProperty(exports, "signLogicSigTransaction", { enumerable: true, get: function () { return signing_js_1.signLogicSigTransaction; } });
Object.defineProperty(exports, "signLogicSigTransactionObject", { enumerable: true, get: function () { return signing_js_1.signLogicSigTransactionObject; } });
var logicsig_js_1 = require("./logicsig.js");
Object.defineProperty(exports, "LogicSig", { enumerable: true, get: function () { return logicsig_js_1.LogicSig; } });
Object.defineProperty(exports, "LogicSigAccount", { enumerable: true, get: function () { return logicsig_js_1.LogicSigAccount; } });
Object.defineProperty(exports, "logicSigFromByte", { enumerable: true, get: function () { return logicsig_js_1.logicSigFromByte; } });
Object.defineProperty(exports, "tealSign", { enumerable: true, get: function () { return logicsig_js_1.tealSign; } });
Object.defineProperty(exports, "tealSignFromProgram", { enumerable: true, get: function () { return logicsig_js_1.tealSignFromProgram; } });
Object.defineProperty(exports, "verifyTealSign", { enumerable: true, get: function () { return logicsig_js_1.verifyTealSign; } });
var multisig_js_1 = require("./multisig.js");
Object.defineProperty(exports, "verifyMultisig", { enumerable: true, get: function () { return multisig_js_1.verifyMultisig; } });
Object.defineProperty(exports, "multisigAddress", { enumerable: true, get: function () { return multisig_js_1.multisigAddress; } });
var multisigSigning_js_1 = require("./multisigSigning.js");
Object.defineProperty(exports, "signMultisigTransaction", { enumerable: true, get: function () { return multisigSigning_js_1.signMultisigTransaction; } });
Object.defineProperty(exports, "mergeMultisigTransactions", { enumerable: true, get: function () { return multisigSigning_js_1.mergeMultisigTransactions; } });
Object.defineProperty(exports, "appendSignMultisigTransaction", { enumerable: true, get: function () { return multisigSigning_js_1.appendSignMultisigTransaction; } });
Object.defineProperty(exports, "createMultisigTransaction", { enumerable: true, get: function () { return multisigSigning_js_1.createMultisigTransaction; } });
Object.defineProperty(exports, "appendSignRawMultisigSignature", { enumerable: true, get: function () { return multisigSigning_js_1.appendSignRawMultisigSignature; } });
var sourcemap_js_1 = require("./logic/sourcemap.js");
Object.defineProperty(exports, "ProgramSourceMap", { enumerable: true, get: function () { return sourcemap_js_1.ProgramSourceMap; } });
__exportStar(require("./dryrun.js"), exports);
__exportStar(require("./makeTxn.js"), exports);
__exportStar(require("./transaction.js"), exports);
__exportStar(require("./signer.js"), exports);
__exportStar(require("./composer.js"), exports);
__exportStar(require("./types/transactions/index.js"), exports);
__exportStar(require("./abi/index.js"), exports);
//# sourceMappingURL=main.js.map