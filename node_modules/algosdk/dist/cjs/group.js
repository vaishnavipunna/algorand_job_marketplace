"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assignGroupID = exports.computeGroupID = void 0;
const nacl = __importStar(require("./nacl/naclWrappers.js"));
const encoding_js_1 = require("./encoding/encoding.js");
const utils = __importStar(require("./utils/utils.js"));
const ALGORAND_MAX_TX_GROUP_SIZE = 16;
const TX_GROUP_TAG = new TextEncoder().encode('TG');
function txGroupPreimage(txnHashes) {
    if (txnHashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {
        throw new Error(`${txnHashes.length} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE}`);
    }
    if (txnHashes.length === 0) {
        throw new Error('Cannot compute group ID of zero transactions');
    }
    const bytes = (0, encoding_js_1.msgpackRawEncode)({
        txlist: txnHashes,
    });
    return utils.concatArrays(TX_GROUP_TAG, bytes);
}
/**
 * computeGroupID returns group ID for a group of transactions
 * @param txns - array of transactions
 * @returns Uint8Array
 */
function computeGroupID(txns) {
    const hashes = [];
    for (const txn of txns) {
        hashes.push(txn.rawTxID());
    }
    const toBeHashed = txGroupPreimage(hashes);
    const gid = nacl.genericHash(toBeHashed);
    return Uint8Array.from(gid);
}
exports.computeGroupID = computeGroupID;
/**
 * assignGroupID assigns group id to a given list of unsigned transactions
 * @param txns - array of transactions. The array elements will be modified with the group id
 */
function assignGroupID(txns) {
    const gid = computeGroupID(txns);
    for (const txn of txns) {
        txn.group = gid;
    }
    return txns;
}
exports.assignGroupID = assignGroupID;
//# sourceMappingURL=group.js.map