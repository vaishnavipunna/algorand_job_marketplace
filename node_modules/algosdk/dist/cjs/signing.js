"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signLogicSigTransaction = exports.signLogicSigTransactionObject = void 0;
const nacl = __importStar(require("./nacl/naclWrappers.js"));
const address_js_1 = require("./encoding/address.js");
const encoding = __importStar(require("./encoding/encoding.js"));
const signedTransaction_js_1 = require("./signedTransaction.js");
const logicsig_js_1 = require("./logicsig.js");
const multisig_js_1 = require("./multisig.js");
function signLogicSigTransactionWithAddress(txn, lsig, lsigAddress) {
    if (!lsig.verify(lsigAddress.publicKey)) {
        throw new Error('Logic signature verification failed. Ensure the program and signature are valid.');
    }
    let sgnr;
    if (!nacl.bytesEqual(lsigAddress.publicKey, txn.sender.publicKey)) {
        sgnr = lsigAddress;
    }
    const signedTxn = new signedTransaction_js_1.SignedTransaction({
        lsig,
        txn,
        sgnr,
    });
    return {
        txID: txn.txID(),
        blob: encoding.encodeMsgpack(signedTxn),
    };
}
/**
 * signLogicSigTransactionObject takes a transaction and a LogicSig object and
 * returns a signed transaction.
 *
 * @param txn - The transaction to sign.
 * @param lsigObject - The LogicSig object that will sign the transaction.
 *
 * @returns Object containing txID and blob representing signed transaction.
 */
function signLogicSigTransactionObject(txn, lsigObject) {
    let lsig;
    let lsigAddress;
    if (lsigObject instanceof logicsig_js_1.LogicSigAccount) {
        lsig = lsigObject.lsig;
        lsigAddress = lsigObject.address();
    }
    else {
        lsig = lsigObject;
        if (lsig.sig) {
            // For a LogicSig with a non-multisig delegating account, we cannot derive
            // the address of that account from only its signature, so assume the
            // delegating account is the sender. If that's not the case, the signing
            // will fail.
            lsigAddress = new address_js_1.Address(txn.sender.publicKey);
        }
        else if (lsig.lmsig) {
            const msigMetadata = {
                version: lsig.lmsig.v,
                threshold: lsig.lmsig.thr,
                pks: lsig.lmsig.subsig.map((subsig) => subsig.pk),
            };
            lsigAddress = (0, multisig_js_1.addressFromMultisigPreImg)(msigMetadata);
        }
        else {
            lsigAddress = lsig.address();
        }
    }
    return signLogicSigTransactionWithAddress(txn, lsig, lsigAddress);
}
exports.signLogicSigTransactionObject = signLogicSigTransactionObject;
/**
 * signLogicSigTransaction takes a transaction and a LogicSig object and returns
 * a signed transaction.
 *
 * @param txn - The transaction to sign.
 * @param lsigObject - The LogicSig object that will sign the transaction.
 *
 * @returns Object containing txID and blob representing signed transaction.
 * @throws error on failure
 */
function signLogicSigTransaction(txn, lsigObject) {
    return signLogicSigTransactionObject(txn, lsigObject);
}
exports.signLogicSigTransaction = signLogicSigTransaction;
//# sourceMappingURL=signing.js.map