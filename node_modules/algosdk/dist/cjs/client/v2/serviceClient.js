"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_js_1 = require("../client.js");
/**
 * Convert a token string to a token header
 * @param token - The token string
 * @param headerIdentifier - An identifier for the token header
 */
function convertTokenStringToTokenHeader(headerIdentifier, token = '') {
    const tokenHeader = {};
    if (token === '') {
        return tokenHeader;
    }
    tokenHeader[headerIdentifier] = token;
    return tokenHeader;
}
function isBaseHTTPClient(tbc) {
    return typeof tbc.get === 'function';
}
/**
 * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic
 */
class ServiceClient {
    constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}) {
        if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {
            // we are using a base client
            this.c = new client_js_1.HTTPClient(tokenHeaderOrStrOrBaseClient);
        }
        else {
            // Accept token header as string or object
            // - workaround to allow backwards compatibility for multiple headers
            let tokenHeader;
            if (typeof tokenHeaderOrStrOrBaseClient === 'string') {
                tokenHeader = convertTokenStringToTokenHeader(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient);
            }
            else {
                tokenHeader = tokenHeaderOrStrOrBaseClient;
            }
            this.c = new client_js_1.HTTPClient(tokenHeader, baseServer, port, defaultHeaders);
        }
    }
}
exports.default = ServiceClient;
//# sourceMappingURL=serviceClient.js.map