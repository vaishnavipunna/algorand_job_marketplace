"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonrequest_js_1 = __importDefault(require("../jsonrequest.js"));
const encoding_js_1 = require("../../../encoding/encoding.js");
const types_js_1 = require("./models/types.js");
/**
 * block gets the block info for the given round. this call may block
 */
class Block extends jsonrequest_js_1.default {
    constructor(c, roundNumber) {
        super(c);
        this.round = BigInt(roundNumber);
        this.query = { format: 'msgpack' };
    }
    path() {
        return `/v2/blocks/${this.round}`;
    }
    /**
     * If true, only the block header (exclusive of payset or certificate) may be included in response.
     *
     * #### Example
     * ```typescript
     *
     * const roundNumber = 41000000;
     *
     * const blockResponse = await algodClient
     *        .block(roundNumber)
     *        .headerOnly(true)
     *        .do();
     * ```
     *
     * @param headerOnly - the flag indicating whether exclusively return header in response
     * @category query
     */
    headerOnly(headerOnly) {
        this.query['header-only'] = headerOnly;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return (0, encoding_js_1.decodeMsgpack)(response.body, types_js_1.BlockResponse);
    }
}
exports.default = Block;
//# sourceMappingURL=block.js.map