"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setSimulateTransactionsHeaders = void 0;
const encoding_js_1 = require("../../../encoding/encoding.js");
const jsonrequest_js_1 = __importDefault(require("../jsonrequest.js"));
const types_js_1 = require("./models/types.js");
/**
 * Sets the default header (if not previously set) for simulating a raw
 * transaction.
 * @param headers - A headers object
 */
function setSimulateTransactionsHeaders(headers = {}) {
    let hdrs = headers;
    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {
        hdrs = { ...headers };
        hdrs['Content-Type'] = 'application/msgpack';
    }
    return hdrs;
}
exports.setSimulateTransactionsHeaders = setSimulateTransactionsHeaders;
/**
 * Simulates signed txns.
 */
class SimulateRawTransactions extends jsonrequest_js_1.default {
    constructor(c, request) {
        super(c);
        this.query.format = 'msgpack';
        this.requestBytes = (0, encoding_js_1.encodeMsgpack)(request);
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/transactions/simulate';
    }
    executeRequest(headers, customOptions) {
        const txHeaders = setSimulateTransactionsHeaders(headers);
        return this.c.post({
            relativePath: this.path(),
            data: this.requestBytes,
            query: this.query,
            requestHeaders: txHeaders,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return (0, encoding_js_1.decodeMsgpack)(response.body, types_js_1.SimulateResponse);
    }
}
exports.default = SimulateRawTransactions;
//# sourceMappingURL=simulateTransaction.js.map