"use strict";
/**
 * This file is a wrapper of msgpack.js.
 * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.
 * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.
 * Algorand's msgpack encoding follows to following rules -
 *  1. Every integer must be encoded to the smallest type possible (0-255-\>8bit, 256-65535-\>16bit, etx)
 *  2. All fields names must be sorted
 *  3. All empty and 0 fields should be omitted
 *  4. Every positive number must be encoded as uint
 *  5. Binary blob should be used for binary data and string for strings
 *  */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeJSON = exports.decodeJSON = exports.encodeMsgpack = exports.decodeMsgpack = exports.Schema = exports.MsgpackRawStringProvider = exports.jsonEncodingDataToMsgpackEncodingData = exports.msgpackEncodingDataToJSONEncodingData = exports.msgpackRawDecodeAsMap = exports.decodeObj = exports.msgpackRawDecode = exports.encodeObj = exports.msgpackRawEncode = exports.ERROR_CONTAINS_EMPTY_STRING = void 0;
const algorand_msgpack_1 = require("algorand-msgpack");
const binarydata_js_1 = require("./binarydata.js");
const intDecoding_js_1 = __importDefault(require("../types/intDecoding.js"));
const utils_js_1 = require("../utils/utils.js");
// Errors
exports.ERROR_CONTAINS_EMPTY_STRING = 'The object contains empty or 0 values. First empty or 0 value encountered during encoding: ';
/**
 * containsEmpty returns true if any of the object's values are empty, false otherwise.
 * Empty arrays considered empty
 * @param obj - The object to check
 * @returns \{true, empty key\} if contains empty, \{false, undefined\} otherwise
 */
function containsEmpty(obj) {
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (!obj[key] || obj[key].length === 0) {
                return { containsEmpty: true, firstEmptyKey: key };
            }
        }
    }
    return { containsEmpty: false, firstEmptyKey: undefined };
}
/**
 * msgpackRawEncode encodes objects using msgpack, regardless of whether there are
 * empty or 0 value fields.
 * @param obj - a dictionary to be encoded. May or may not contain empty or 0 values.
 * @returns msgpack representation of the object
 */
function msgpackRawEncode(obj) {
    // enable the canonical option
    const options = { sortKeys: true };
    return (0, algorand_msgpack_1.encode)(obj, options);
}
exports.msgpackRawEncode = msgpackRawEncode;
/**
 * encodeObj takes a javascript object and returns its msgpack encoding
 * Note that the encoding sorts the fields alphabetically
 * @param o - js object to be encoded. Must not contain empty or 0 values.
 * @returns Uint8Array binary representation
 * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values
 *
 * @deprecated Use {@link msgpackRawEncode} instead. Note that function does not
 *   check for empty values like this one does.
 */
function encodeObj(obj) {
    // Check for empty values
    const emptyCheck = containsEmpty(obj);
    if (emptyCheck.containsEmpty) {
        throw new Error(exports.ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);
    }
    return msgpackRawEncode(obj);
}
exports.encodeObj = encodeObj;
function intDecodingToIntMode(intDecoding) {
    switch (intDecoding) {
        case intDecoding_js_1.default.UNSAFE:
            return algorand_msgpack_1.IntMode.UNSAFE_NUMBER;
        case intDecoding_js_1.default.SAFE:
            return algorand_msgpack_1.IntMode.SAFE_NUMBER;
        case intDecoding_js_1.default.MIXED:
            return algorand_msgpack_1.IntMode.MIXED;
        case intDecoding_js_1.default.BIGINT:
            return algorand_msgpack_1.IntMode.BIGINT;
        default:
            throw new Error(`Invalid intDecoding: ${intDecoding}`);
    }
}
/**
 * Decodes msgpack bytes into a plain JavaScript object.
 * @param buffer - The msgpack bytes to decode
 * @param options - Options for decoding, including int decoding mode. See {@link IntDecoding} for more information.
 * @returns The decoded object
 */
function msgpackRawDecode(buffer, options) {
    const decoderOptions = {
        intMode: options?.intDecoding
            ? intDecodingToIntMode(options?.intDecoding)
            : algorand_msgpack_1.IntMode.BIGINT,
    };
    return (0, algorand_msgpack_1.decode)(buffer, decoderOptions);
}
exports.msgpackRawDecode = msgpackRawDecode;
/**
 * decodeObj takes a Uint8Array and returns its javascript obj
 * @param o - Uint8Array to decode
 * @returns object
 *
 * @deprecated Use {@link msgpackRawDecode} instead. Note that this function uses `IntDecoding.MIXED`
 *   while `msgpackRawDecode` defaults to `IntDecoding.BIGINT` for int decoding, though it is
 *   configurable.
 */
function decodeObj(o) {
    return msgpackRawDecode(o, { intDecoding: intDecoding_js_1.default.MIXED });
}
exports.decodeObj = decodeObj;
/**
 * Decodes msgpack bytes into a Map object. This supports decoding non-string map keys.
 * @param encoded - The msgpack bytes to decode
 * @param options - Options for decoding, including int decoding mode. See {@link IntDecoding} for more information.
 * @returns The decoded Map object
 */
function msgpackRawDecodeAsMap(encoded, options) {
    const decoderOptions = {
        intMode: options?.intDecoding
            ? intDecodingToIntMode(options?.intDecoding)
            : algorand_msgpack_1.IntMode.BIGINT,
        useMap: true,
    };
    return (0, algorand_msgpack_1.decode)(encoded, decoderOptions);
}
exports.msgpackRawDecodeAsMap = msgpackRawDecodeAsMap;
function msgpackRawDecodeAsMapWithRawStrings(encoded, options) {
    const decoderOptions = {
        intMode: options?.intDecoding
            ? intDecodingToIntMode(options?.intDecoding)
            : algorand_msgpack_1.IntMode.BIGINT,
        useMap: true,
        rawBinaryStringKeys: true,
        rawBinaryStringValues: true,
        useRawBinaryStringClass: true,
    };
    return (0, algorand_msgpack_1.decode)(encoded, decoderOptions);
}
function msgpackEncodingDataToJSONEncodingData(e) {
    if (e === null || e === undefined) {
        return e;
    }
    if (e instanceof Uint8Array) {
        return (0, binarydata_js_1.bytesToBase64)(e);
    }
    if (Array.isArray(e)) {
        return e.map(msgpackEncodingDataToJSONEncodingData);
    }
    if (e instanceof Map) {
        const obj = {};
        for (const [k, v] of e) {
            if (typeof k !== 'string') {
                throw new Error(`JSON map key must be a string: ${k}`);
            }
            obj[k] = msgpackEncodingDataToJSONEncodingData(v);
        }
        return obj;
    }
    return e;
}
exports.msgpackEncodingDataToJSONEncodingData = msgpackEncodingDataToJSONEncodingData;
function jsonEncodingDataToMsgpackEncodingData(e) {
    if (e === null || e === undefined) {
        return e;
    }
    if (typeof e === 'string' || // Note, this will not convert base64 to Uint8Array
        typeof e === 'number' ||
        typeof e === 'bigint' ||
        typeof e === 'boolean') {
        return e;
    }
    if (Array.isArray(e)) {
        return e.map(jsonEncodingDataToMsgpackEncodingData);
    }
    if (typeof e === 'object') {
        const obj = new Map();
        for (const [key, value] of Object.entries(e)) {
            obj.set(key, jsonEncodingDataToMsgpackEncodingData(value));
        }
        return obj;
    }
    throw new Error(`Invalid JSON encoding data: ${e}`);
}
exports.jsonEncodingDataToMsgpackEncodingData = jsonEncodingDataToMsgpackEncodingData;
/* eslint-disable class-methods-use-this */
/* eslint-disable no-useless-constructor,no-empty-function */
var MsgpackObjectPathSegmentKind;
(function (MsgpackObjectPathSegmentKind) {
    MsgpackObjectPathSegmentKind[MsgpackObjectPathSegmentKind["MAP_VALUE"] = 0] = "MAP_VALUE";
    MsgpackObjectPathSegmentKind[MsgpackObjectPathSegmentKind["ARRAY_ELEMENT"] = 1] = "ARRAY_ELEMENT";
})(MsgpackObjectPathSegmentKind || (MsgpackObjectPathSegmentKind = {}));
/**
 * This class is used to index into an encoded msgpack object and extract raw strings.
 */
class MsgpackRawStringProvider {
    constructor({ parent, segment, baseObjectBytes, }) {
        this.resolvedCache = null;
        this.resolvedCachePresent = false;
        this.parent = parent;
        this.segment = segment;
        this.baseObjectBytes = baseObjectBytes;
    }
    /**
     * Create a new provider that resolves to the current provider's map value at the given key.
     */
    withMapValue(key) {
        return new MsgpackRawStringProvider({
            parent: this,
            segment: {
                kind: MsgpackObjectPathSegmentKind.MAP_VALUE,
                key,
            },
        });
    }
    /**
     * Create a new provider that resolves to the current provider's array element at the given index.
     */
    withArrayElement(index) {
        return new MsgpackRawStringProvider({
            parent: this,
            segment: {
                kind: MsgpackObjectPathSegmentKind.ARRAY_ELEMENT,
                key: index,
            },
        });
    }
    /**
     * Get the raw string at the current location. If the current location is not a raw string, an error is thrown.
     */
    getRawStringAtCurrentLocation() {
        const resolved = this.resolve();
        if (resolved instanceof algorand_msgpack_1.RawBinaryString) {
            // Decoded rawBinaryValue will always be a Uint8Array
            return resolved.rawBinaryValue;
        }
        throw new Error(`Invalid type. Expected RawBinaryString, got ${resolved} (${typeof resolved})`);
    }
    /**
     * Get the raw string map keys and values at the current location. If the current location is not a map, an error is thrown.
     */
    getRawStringKeysAndValuesAtCurrentLocation() {
        const resolved = this.resolve();
        if (!(resolved instanceof Map)) {
            throw new Error(`Invalid type. Expected Map, got ${resolved} (${typeof resolved})`);
        }
        const keysAndValues = new Map();
        for (const [key, value] of resolved) {
            if (key instanceof algorand_msgpack_1.RawBinaryString) {
                // Decoded rawBinaryValue will always be a Uint8Array
                keysAndValues.set(key.rawBinaryValue, value);
            }
            else {
                throw new Error(`Invalid type for map key. Expected RawBinaryString, got ${key} (${typeof key})`);
            }
        }
        return keysAndValues;
    }
    /**
     * Resolve the provider by extracting the value it indicates from the base msgpack object.
     */
    resolve() {
        if (this.resolvedCachePresent) {
            return this.resolvedCache;
        }
        let parentResolved;
        if (this.parent) {
            parentResolved = this.parent.resolve();
        }
        else {
            // Need to parse baseObjectBytes
            parentResolved = msgpackRawDecodeAsMapWithRawStrings(this.baseObjectBytes);
        }
        if (!this.segment) {
            this.resolvedCache = parentResolved;
            this.resolvedCachePresent = true;
            return parentResolved;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.MAP_VALUE) {
            if (!(parentResolved instanceof Map)) {
                throw new Error(`Invalid type. Expected Map, got ${parentResolved} (${typeof parentResolved})`);
            }
            // All decoded map keys will be raw strings, and Map objects compare complex values by reference,
            // so we must check all the values for value-equality.
            if (typeof this.segment.key === 'string' ||
                this.segment.key instanceof Uint8Array ||
                this.segment.key instanceof algorand_msgpack_1.RawBinaryString) {
                const targetBytes = this.segment.key instanceof algorand_msgpack_1.RawBinaryString
                    ? // Decoded rawBinaryValue will always be a Uint8Array
                        this.segment.key.rawBinaryValue
                    : (0, binarydata_js_1.coerceToBytes)(this.segment.key);
                const targetIsRawString = typeof this.segment.key === 'string' ||
                    this.segment.key instanceof algorand_msgpack_1.RawBinaryString;
                for (const [key, value] of parentResolved) {
                    let potentialKeyBytes;
                    if (targetIsRawString) {
                        if (key instanceof algorand_msgpack_1.RawBinaryString) {
                            // Decoded rawBinaryValue will always be a Uint8Array
                            potentialKeyBytes = key.rawBinaryValue;
                        }
                    }
                    else if (key instanceof Uint8Array) {
                        potentialKeyBytes = key;
                    }
                    if (potentialKeyBytes && (0, utils_js_1.arrayEqual)(targetBytes, potentialKeyBytes)) {
                        this.resolvedCache = value;
                        break;
                    }
                }
            }
            else {
                this.resolvedCache = parentResolved.get(this.segment.key);
            }
            this.resolvedCachePresent = true;
            return this.resolvedCache;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.ARRAY_ELEMENT) {
            if (!Array.isArray(parentResolved)) {
                throw new Error(`Invalid type. Expected Array, got ${parentResolved} (${typeof parentResolved})`);
            }
            this.resolvedCache = parentResolved[this.segment.key];
            this.resolvedCachePresent = true;
            return this.resolvedCache;
        }
        throw new Error(`Invalid segment kind: ${this.segment.kind}`);
    }
    /**
     * Get the path string of the current location indicated by the provider. Useful for debugging.
     */
    getPathString() {
        const parentPathString = this.parent ? this.parent.getPathString() : 'root';
        if (!this.segment) {
            return parentPathString;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.MAP_VALUE) {
            return `${parentPathString} -> map key "${this.segment.key}" (${typeof this.segment.key})`;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.ARRAY_ELEMENT) {
            return `${parentPathString} -> array index ${this.segment.key} (${typeof this.segment.key})`;
        }
        return `${parentPathString} -> unknown segment kind ${this.segment.kind}`;
    }
}
exports.MsgpackRawStringProvider = MsgpackRawStringProvider;
/**
 * A Schema is used to prepare objects for encoding and decoding from msgpack and JSON.
 *
 * Schemas represent a specific type.
 */
class Schema {
}
exports.Schema = Schema;
/**
 * Decode a msgpack byte array to an Encodable object.
 * @param encoded - The msgpack bytes to decode
 * @param c - The class of the object to decode. This class must match the object that was encoded.
 * @returns An instance of the class with the decoded data
 */
function decodeMsgpack(encoded, c) {
    const decoded = msgpackRawDecodeAsMap(encoded);
    const rawStringProvider = new MsgpackRawStringProvider({
        baseObjectBytes: encoded,
    });
    return c.fromEncodingData(c.encodingSchema.fromPreparedMsgpack(decoded, rawStringProvider));
}
exports.decodeMsgpack = decodeMsgpack;
/**
 * Encode an Encodable object to a msgpack byte array.
 * @param e - The object to encode
 * @returns A msgpack byte array encoding of the object
 */
function encodeMsgpack(e) {
    return msgpackRawEncode(e.getEncodingSchema().prepareMsgpack(e.toEncodingData()));
}
exports.encodeMsgpack = encodeMsgpack;
/**
 * Decode a JSON string to an Encodable object.
 * @param encoded - The JSON string to decode
 * @param c - The class of the object to decode. This class must match the object that was encoded.
 * @returns An instance of the class with the decoded data
 */
function decodeJSON(encoded, c) {
    const decoded = (0, utils_js_1.parseJSON)(encoded, {
        intDecoding: intDecoding_js_1.default.BIGINT,
    });
    return c.fromEncodingData(c.encodingSchema.fromPreparedJSON(decoded));
}
exports.decodeJSON = decodeJSON;
/**
 * Encode an Encodable object to a JSON string.
 * @param e - The object to encode
 * @param options - Optional encoding options. See {@link EncodeJSONOptions} for more information.
 * @returns A JSON string encoding of the object
 */
function encodeJSON(e, options) {
    const { space, ...prepareJSONOptions } = options ?? {};
    const prepared = e
        .getEncodingSchema()
        .prepareJSON(e.toEncodingData(), prepareJSONOptions);
    return (0, utils_js_1.stringifyJSON)(prepared, undefined, space);
}
exports.encodeJSON = encodeJSON;
//# sourceMappingURL=encoding.js.map