"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApplicationAddress = exports.encodeAddress = exports.isValidAddress = exports.decodeAddress = exports.Address = exports.CHECKSUM_ADDRESS_ERROR_MSG = exports.MALFORMED_ADDRESS_ERROR_MSG = exports.ALGORAND_ZERO_ADDRESS_STRING = exports.ALGORAND_ADDRESS_LENGTH = exports.ALGORAND_CHECKSUM_BYTE_LENGTH = exports.ALGORAND_ADDRESS_BYTE_LENGTH = void 0;
const hi_base32_1 = __importDefault(require("hi-base32"));
const nacl = __importStar(require("../nacl/naclWrappers.js"));
const utils = __importStar(require("../utils/utils.js"));
const uint64_js_1 = require("./uint64.js");
const binarydata_js_1 = require("./binarydata.js");
exports.ALGORAND_ADDRESS_BYTE_LENGTH = 36;
exports.ALGORAND_CHECKSUM_BYTE_LENGTH = 4;
exports.ALGORAND_ADDRESS_LENGTH = 58;
exports.ALGORAND_ZERO_ADDRESS_STRING = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ';
exports.MALFORMED_ADDRESS_ERROR_MSG = 'address seems to be malformed';
exports.CHECKSUM_ADDRESS_ERROR_MSG = 'wrong checksum for address';
function checksumFromPublicKey(pk) {
    return Uint8Array.from(nacl
        .genericHash(pk)
        .slice(nacl.HASH_BYTES_LENGTH - exports.ALGORAND_CHECKSUM_BYTE_LENGTH, nacl.HASH_BYTES_LENGTH));
}
/**
 * Represents an Algorand address
 */
class Address {
    /**
     * Create a new Address object from its binary form.
     * @param publicKey - The binary form of the address. Must be 32 bytes.
     */
    constructor(publicKey) {
        if (!(publicKey instanceof Uint8Array)) {
            throw new Error(`${exports.MALFORMED_ADDRESS_ERROR_MSG}: ${publicKey} is not Uint8Array, type ${typeof publicKey}`);
        }
        if (publicKey.length !==
            exports.ALGORAND_ADDRESS_BYTE_LENGTH - exports.ALGORAND_CHECKSUM_BYTE_LENGTH)
            throw new Error(`${exports.MALFORMED_ADDRESS_ERROR_MSG}: 0x${(0, binarydata_js_1.bytesToHex)(publicKey)}, length ${publicKey.length}`);
        this.publicKey = publicKey;
    }
    /**
     * Check if the address is equal to another address.
     */
    equals(other) {
        return (other instanceof Address &&
            utils.arrayEqual(this.publicKey, other.publicKey));
    }
    /**
     * Compute the 4 byte checksum of the address.
     */
    checksum() {
        return checksumFromPublicKey(this.publicKey);
    }
    /**
     * Encode the address into a string form.
     */
    toString() {
        const addr = hi_base32_1.default.encode(utils.concatArrays(this.publicKey, this.checksum()));
        return addr.slice(0, exports.ALGORAND_ADDRESS_LENGTH); // removing the extra '===='
    }
    /**
     * Decode an address from a string.
     * @param address - The address to decode. Must be 58 bytes long.
     * @returns An Address object corresponding to the input string.
     */
    static fromString(address) {
        if (typeof address !== 'string')
            throw new Error(`${exports.MALFORMED_ADDRESS_ERROR_MSG}: expected string, got ${typeof address}, ${address}`);
        if (address.length !== exports.ALGORAND_ADDRESS_LENGTH)
            throw new Error(`${exports.MALFORMED_ADDRESS_ERROR_MSG}: expected length ${exports.ALGORAND_ADDRESS_LENGTH}, got ${address.length}: ${address}`);
        // try to decode
        const decoded = hi_base32_1.default.decode.asBytes(address);
        // Sanity check
        if (decoded.length !== exports.ALGORAND_ADDRESS_BYTE_LENGTH)
            throw new Error(`${exports.MALFORMED_ADDRESS_ERROR_MSG}: expected byte length ${exports.ALGORAND_ADDRESS_BYTE_LENGTH}, got ${decoded.length}`);
        // Find publickey and checksum
        const pk = new Uint8Array(decoded.slice(0, exports.ALGORAND_ADDRESS_BYTE_LENGTH - exports.ALGORAND_CHECKSUM_BYTE_LENGTH));
        const cs = new Uint8Array(decoded.slice(nacl.PUBLIC_KEY_LENGTH, exports.ALGORAND_ADDRESS_BYTE_LENGTH));
        const checksum = checksumFromPublicKey(pk);
        // Check if the checksum and the address are equal
        if (!utils.arrayEqual(checksum, cs))
            throw new Error(exports.CHECKSUM_ADDRESS_ERROR_MSG);
        return new Address(pk);
    }
    /**
     * Get the zero address.
     */
    static zeroAddress() {
        return new Address(new Uint8Array(exports.ALGORAND_ADDRESS_BYTE_LENGTH - exports.ALGORAND_CHECKSUM_BYTE_LENGTH));
    }
}
exports.Address = Address;
/**
 * decodeAddress takes an Algorand address in string form and decodes it into a Uint8Array.
 * @param address - an Algorand address with checksum.
 * @returns the decoded form of the address's public key and checksum
 */
function decodeAddress(address) {
    return Address.fromString(address);
}
exports.decodeAddress = decodeAddress;
/**
 * isValidAddress checks if a string is a valid Algorand address.
 * @param address - an Algorand address with checksum.
 * @returns true if valid, false otherwise
 */
function isValidAddress(address) {
    // Try to decode
    try {
        Address.fromString(address);
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidAddress = isValidAddress;
/**
 * encodeAddress takes an Algorand address as a Uint8Array and encodes it into a string with checksum.
 * @param address - a raw Algorand address
 * @returns the address and checksum encoded as a string.
 */
function encodeAddress(address) {
    return new Address(address).toString();
}
exports.encodeAddress = encodeAddress;
const APP_ID_PREFIX = new TextEncoder().encode('appID');
/**
 * Get the escrow address of an application.
 * @param appID - The ID of the application.
 * @returns The address corresponding to that application's escrow account.
 */
function getApplicationAddress(appID) {
    const toBeSigned = utils.concatArrays(APP_ID_PREFIX, (0, uint64_js_1.encodeUint64)(appID));
    const hash = nacl.genericHash(toBeSigned);
    return new Address(Uint8Array.from(hash));
}
exports.getApplicationAddress = getApplicationAddress;
//# sourceMappingURL=address.js.map