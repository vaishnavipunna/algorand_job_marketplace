"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpecialCaseBinaryStringSchema = void 0;
const algorand_msgpack_1 = require("algorand-msgpack");
const encoding_js_1 = require("../encoding.js");
const binarydata_js_1 = require("../binarydata.js");
const utils_js_1 = require("../../utils/utils.js");
/* eslint-disable class-methods-use-this */
/**
 * SpecialCaseBinaryStringSchema is a schema for byte arrays which are encoded
 * as strings in msgpack and JSON.
 *
 * This schema allows lossless conversion between the in memory representation
 * and the msgpack encoded representation, but NOT between the in memory and
 * JSON encoded representations if the byte array contains invalid UTF-8
 * sequences.
 */
class SpecialCaseBinaryStringSchema extends encoding_js_1.Schema {
    defaultValue() {
        return new Uint8Array();
    }
    isDefaultValue(data) {
        return data instanceof Uint8Array && data.byteLength === 0;
    }
    prepareMsgpack(data) {
        if (data instanceof Uint8Array) {
            // Cast is needed because RawBinaryString is not part of the standard MsgpackEncodingData
            return new algorand_msgpack_1.RawBinaryString(data);
        }
        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(_encoded, rawStringProvider) {
        return rawStringProvider.getRawStringAtCurrentLocation();
    }
    prepareJSON(data, options) {
        if (data instanceof Uint8Array) {
            // Not safe to convert to string for all binary data
            const stringValue = (0, binarydata_js_1.bytesToString)(data);
            if (!options.lossyBinaryStringConversion &&
                !(0, utils_js_1.arrayEqual)((0, binarydata_js_1.coerceToBytes)(stringValue), data)) {
                throw new Error(`Invalid UTF-8 byte array encountered. Encode with lossyBinaryStringConversion enabled to bypass this check. Base64 value: ${(0, binarydata_js_1.bytesToBase64)(data)}`);
            }
            return stringValue;
        }
        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'string') {
            return (0, binarydata_js_1.coerceToBytes)(encoded);
        }
        throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);
    }
}
exports.SpecialCaseBinaryStringSchema = SpecialCaseBinaryStringSchema;
//# sourceMappingURL=binarystring.js.map