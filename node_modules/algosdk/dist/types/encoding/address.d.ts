export declare const ALGORAND_ADDRESS_BYTE_LENGTH = 36;
export declare const ALGORAND_CHECKSUM_BYTE_LENGTH = 4;
export declare const ALGORAND_ADDRESS_LENGTH = 58;
export declare const ALGORAND_ZERO_ADDRESS_STRING = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
export declare const MALFORMED_ADDRESS_ERROR_MSG = "address seems to be malformed";
export declare const CHECKSUM_ADDRESS_ERROR_MSG = "wrong checksum for address";
/**
 * Represents an Algorand address
 */
export declare class Address {
    /**
     * The binary form of the address. For standard accounts, this is the public key.
     */
    readonly publicKey: Uint8Array;
    /**
     * Create a new Address object from its binary form.
     * @param publicKey - The binary form of the address. Must be 32 bytes.
     */
    constructor(publicKey: Uint8Array);
    /**
     * Check if the address is equal to another address.
     */
    equals(other: Address): boolean;
    /**
     * Compute the 4 byte checksum of the address.
     */
    checksum(): Uint8Array;
    /**
     * Encode the address into a string form.
     */
    toString(): string;
    /**
     * Decode an address from a string.
     * @param address - The address to decode. Must be 58 bytes long.
     * @returns An Address object corresponding to the input string.
     */
    static fromString(address: string): Address;
    /**
     * Get the zero address.
     */
    static zeroAddress(): Address;
}
/**
 * decodeAddress takes an Algorand address in string form and decodes it into a Uint8Array.
 * @param address - an Algorand address with checksum.
 * @returns the decoded form of the address's public key and checksum
 */
export declare function decodeAddress(address: string): Address;
/**
 * isValidAddress checks if a string is a valid Algorand address.
 * @param address - an Algorand address with checksum.
 * @returns true if valid, false otherwise
 */
export declare function isValidAddress(address: string): boolean;
/**
 * encodeAddress takes an Algorand address as a Uint8Array and encodes it into a string with checksum.
 * @param address - a raw Algorand address
 * @returns the address and checksum encoded as a string.
 */
export declare function encodeAddress(address: Uint8Array): string;
/**
 * Get the escrow address of an application.
 * @param appID - The ID of the application.
 * @returns The address corresponding to that application's escrow account.
 */
export declare function getApplicationAddress(appID: number | bigint): Address;
