import { Schema, MsgpackEncodingData, MsgpackRawStringProvider, JSONEncodingData, PrepareJSONOptions } from '../encoding.js';
export declare class ByteArraySchema extends Schema {
    defaultValue(): Uint8Array;
    isDefaultValue(data: unknown): boolean;
    prepareMsgpack(data: unknown): MsgpackEncodingData;
    fromPreparedMsgpack(encoded: MsgpackEncodingData, _rawStringProvider: MsgpackRawStringProvider): Uint8Array;
    prepareJSON(data: unknown, _options: PrepareJSONOptions): JSONEncodingData;
    fromPreparedJSON(encoded: JSONEncodingData): Uint8Array;
}
export declare class FixedLengthByteArraySchema extends Schema {
    readonly length: number;
    constructor(length: number);
    defaultValue(): Uint8Array;
    isDefaultValue(data: unknown): boolean;
    prepareMsgpack(data: unknown): MsgpackEncodingData;
    fromPreparedMsgpack(encoded: MsgpackEncodingData, _rawStringProvider: MsgpackRawStringProvider): Uint8Array;
    prepareJSON(data: unknown): JSONEncodingData;
    fromPreparedJSON(encoded: JSONEncodingData): Uint8Array;
}
