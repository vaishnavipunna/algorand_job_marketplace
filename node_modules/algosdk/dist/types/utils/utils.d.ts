import IntDecoding from '../types/intDecoding.js';
export interface ParseJSONOptions {
    intDecoding: IntDecoding;
}
/**
 * Parse JSON with additional options.
 * @param str - The JSON string to parse.
 * @param options - Configures how integers in this JSON string will be decoded. See the
 *   `IntDecoding` enum for more details.
 */
export declare function parseJSON(str: string, { intDecoding }: ParseJSONOptions): any;
/**
 * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
 *
 * This functions differs from the built-in JSON.stringify in that it supports serializing BigInts.
 *
 * This function takes the same arguments as the built-in JSON.stringify function.
 *
 * @param value - A JavaScript value, usually an object or array, to be converted.
 * @param replacer - A function that transforms the results.
 * @param space - Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 */
export declare function stringifyJSON(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
/**
 * ArrayEqual takes two arrays and return true if equal, false otherwise
 */
export declare function arrayEqual<T>(a: ArrayLike<T>, b: ArrayLike<T>): boolean;
/**
 * ConcatArrays takes n number arrays and returns a joint Uint8Array
 * @param arrs - An arbitrary number of n array-like number list arguments
 * @returns [a,b]
 */
export declare function concatArrays(...arrs: ArrayLike<number>[]): Uint8Array;
/**
 * Remove undefined properties from an object
 * @param obj - An object, preferably one with some undefined properties
 * @returns A copy of the object with undefined properties removed
 */
export declare function removeUndefinedProperties(obj: Record<string | number | symbol, any>): {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
};
/**
 * Check whether the environment is Node.js (as opposed to the browser)
 * @returns True if Node.js environment, false otherwise
 */
export declare function isNode(): boolean;
/**
 * Check whether the environment is ReactNative
 * @returns True if ReactNative, false otherwise
 */
export declare function isReactNative(): boolean;
export declare function ensureSafeInteger(value: unknown): number;
export declare function ensureSafeUnsignedInteger(value: unknown): number;
export declare function ensureBigInt(value: unknown): bigint;
export declare function ensureUint64(value: unknown): bigint;
