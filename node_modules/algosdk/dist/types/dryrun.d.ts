import { AlgodClient } from './client/v2/algod/algod.js';
import { DryrunRequest, DryrunSource, DryrunTxnResult } from './client/v2/algod/models/types.js';
import { SignedTransaction } from './signedTransaction.js';
/**
 * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions
 * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances
 * @param client - the AlgodClient to make requests against
 * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object
 * @param protocolVersion - the string representing the protocol version to use
 * @param latestTimestamp - the timestamp
 * @param round - the round available to some TEAL scripts. Defaults to the current round on the network.
 * @param sources - TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.
 * @returns the DryrunRequest object constructed from the SignedTransactions passed
 */
export declare function createDryrun({ client, txns, protocolVersion, latestTimestamp, round, sources, }: {
    client: AlgodClient;
    txns: SignedTransaction[];
    protocolVersion?: string;
    latestTimestamp?: number | bigint;
    round?: number | bigint;
    sources?: DryrunSource[];
}): Promise<DryrunRequest>;
export interface StackPrinterConfig {
    maxValueWidth: number | undefined;
    topOfStackFirst: boolean | undefined;
}
export declare function dryrunTxnResultAppTrace(result: DryrunTxnResult, spc?: StackPrinterConfig): string;
export declare function dryrunTxnResultLogicSigTrace(result: DryrunTxnResult, spc?: StackPrinterConfig): string;
