import { Address } from './encoding/address.js';
import { Encodable, Schema } from './encoding/encoding.js';
import { NamedMapSchema } from './encoding/schema/index.js';
export declare class HeartbeatProof implements Encodable {
    static readonly encodingSchema: NamedMapSchema;
    sig: Uint8Array;
    pk: Uint8Array;
    pk2: Uint8Array;
    pk1Sig: Uint8Array;
    pk2Sig: Uint8Array;
    constructor(params: {
        sig: Uint8Array;
        pk: Uint8Array;
        pk2: Uint8Array;
        pk1Sig: Uint8Array;
        pk2Sig: Uint8Array;
    });
    getEncodingSchema(): Schema;
    toEncodingData(): Map<string, unknown>;
    static fromEncodingData(data: unknown): HeartbeatProof;
}
export declare class Heartbeat implements Encodable {
    static readonly encodingSchema: NamedMapSchema;
    address: Address;
    proof: HeartbeatProof;
    seed: Uint8Array;
    voteID: Uint8Array;
    keyDilution: bigint;
    constructor(params: {
        address: Address;
        proof: HeartbeatProof;
        seed: Uint8Array;
        voteID: Uint8Array;
        keyDilution: bigint;
    });
    getEncodingSchema(): Schema;
    toEncodingData(): Map<string, unknown>;
    static fromEncodingData(data: unknown): Heartbeat;
}
