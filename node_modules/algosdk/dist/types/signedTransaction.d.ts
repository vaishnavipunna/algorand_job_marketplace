import { Encodable } from './encoding/encoding.js';
import { Address } from './encoding/address.js';
import { Transaction } from './transaction.js';
import { LogicSig } from './logicsig.js';
import { EncodedMultisig } from './types/transactions/index.js';
import { NamedMapSchema } from './encoding/schema/index.js';
export declare class SignedTransaction implements Encodable {
    static readonly encodingSchema: NamedMapSchema;
    /**
     * The transaction that was signed
     */
    readonly txn: Transaction;
    /**
     * Transaction signature
     */
    readonly sig?: Uint8Array;
    /**
     * Multisig structure
     */
    readonly msig?: EncodedMultisig;
    /**
     * Logic signature
     */
    readonly lsig?: LogicSig;
    /**
     * The signer, if signing with a different key than the Transaction type `sender` property indicates
     */
    readonly sgnr?: Address;
    constructor({ txn, sig, msig, lsig, sgnr, }: {
        txn: Transaction;
        sig?: Uint8Array;
        msig?: EncodedMultisig;
        lsig?: LogicSig;
        sgnr?: Address;
    });
    getEncodingSchema(): NamedMapSchema;
    toEncodingData(): Map<string, unknown>;
    static fromEncodingData(data: unknown): SignedTransaction;
}
/**
 * decodeSignedTransaction takes a Uint8Array (from transaction.signTxn) and converts it to an object
 * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)
 * @param transactionBuffer - the Uint8Array containing a transaction
 * @returns containing a Transaction, the signature, and possibly an auth-addr field
 */
export declare function decodeSignedTransaction(transactionBuffer: Uint8Array): SignedTransaction;
/**
 * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,
 * converts it into a SignedTransaction-like object, and converts it to a Buffer.
 *
 * Note: this function should only be used to simulate unsigned transactions.
 *
 * @param txn - Transaction object to simulate.
 */
export declare function encodeUnsignedSimulateTransaction(txn: Transaction): Uint8Array;
