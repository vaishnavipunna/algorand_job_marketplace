import { Address } from './encoding/address.js';
import { BoxReference, HoldingReference, LocalsReference, ResourceReference } from './types/transactions/base.js';
/**
 * resourceReferencesToEncodingData translates an array of ResourceReferences into an array of encoding data
 * maps.
 */
export declare function resourceReferencesToEncodingData(appIndex: bigint, references: ReadonlyArray<ResourceReference>): Array<Map<string, unknown>>;
export declare function convertIndicesToResourceReferences(accessList: Array<Map<string, unknown>>): Array<ResourceReference>;
/**
 * foreignArraysToResourceReferences makes a single array of ResourceReferences from various foreign resource arrays.
 * Note, runtime representation of ResourceReference uses addresses, app and asset identifiers, not indexes.
 *
 * @param accounts - optional array of accounts
 * @param foreignAssets - optional array of foreign assets
 * @param foreignApps - optional array of foreign apps
 * @param holdings - optional array of holdings
 * @param locals - optional array of locals
 * @param boxes - optional array of boxes
 */
export declare function foreignArraysToResourceReferences({ appIndex, accounts, foreignAssets, foreignApps, holdings, locals, boxes, }: {
    appIndex: bigint | number;
    accounts?: ReadonlyArray<string | Address>;
    foreignAssets?: ReadonlyArray<number | bigint>;
    foreignApps?: ReadonlyArray<number | bigint>;
    holdings?: ReadonlyArray<HoldingReference>;
    locals?: ReadonlyArray<LocalsReference>;
    boxes?: ReadonlyArray<BoxReference>;
}): Array<ResourceReference>;
