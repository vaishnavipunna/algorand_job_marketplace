import { Schema, } from '../encoding.js';
import { Address } from '../address.js';
/* eslint-disable class-methods-use-this */
export class AddressSchema extends Schema {
    defaultValue() {
        return Address.zeroAddress();
    }
    isDefaultValue(data) {
        // The equals method checks if the input is an Address
        return Address.zeroAddress().equals(data);
    }
    prepareMsgpack(data) {
        if (data instanceof Address) {
            return data.publicKey;
        }
        throw new Error(`Invalid address: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        // The Address constructor checks that the input is a Uint8Array
        return new Address(encoded);
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        if (data instanceof Address) {
            return data.toString();
        }
        throw new Error(`Invalid address: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        // The Address.fromString method checks that the input is a string
        return Address.fromString(encoded);
    }
}
//# sourceMappingURL=address.js.map