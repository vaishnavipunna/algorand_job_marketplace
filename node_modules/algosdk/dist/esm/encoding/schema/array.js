import { Schema, } from '../encoding.js';
/* eslint-disable class-methods-use-this */
export class ArraySchema extends Schema {
    constructor(itemSchema) {
        super();
        this.itemSchema = itemSchema;
    }
    defaultValue() {
        return [];
    }
    isDefaultValue(data) {
        return Array.isArray(data) && data.length === 0;
    }
    prepareMsgpack(data) {
        if (Array.isArray(data)) {
            return data.map((item) => this.itemSchema.prepareMsgpack(item));
        }
        throw new Error('ArraySchema data must be an array');
    }
    fromPreparedMsgpack(encoded, rawStringProvider) {
        if (Array.isArray(encoded)) {
            return encoded.map((item, index) => this.itemSchema.fromPreparedMsgpack(item, rawStringProvider.withArrayElement(index)));
        }
        throw new Error(`ArraySchema encoded data must be an array: ${encoded} (${typeof encoded})`);
    }
    prepareJSON(data, options) {
        if (Array.isArray(data)) {
            return data.map((item) => this.itemSchema.prepareJSON(item, options));
        }
        throw new Error('ArraySchema data must be an array');
    }
    fromPreparedJSON(encoded) {
        if (Array.isArray(encoded)) {
            return encoded.map((item) => this.itemSchema.fromPreparedJSON(item));
        }
        throw new Error(`ArraySchema encoded data must be an array: ${encoded} (${typeof encoded})`);
    }
}
//# sourceMappingURL=array.js.map