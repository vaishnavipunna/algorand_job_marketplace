import { Schema, } from '../encoding.js';
/* eslint-disable class-methods-use-this */
export class StringSchema extends Schema {
    defaultValue() {
        return '';
    }
    isDefaultValue(data) {
        return data === '';
    }
    prepareMsgpack(data) {
        if (typeof data === 'string') {
            return data;
        }
        throw new Error(`Invalid string: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        if (typeof encoded === 'string') {
            return encoded;
        }
        throw new Error(`Invalid string: (${typeof encoded}) ${encoded}`);
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        if (typeof data === 'string') {
            return data;
        }
        throw new Error(`Invalid string: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'string') {
            return encoded;
        }
        throw new Error(`Invalid string: (${typeof encoded}) ${encoded}`);
    }
}
//# sourceMappingURL=string.js.map